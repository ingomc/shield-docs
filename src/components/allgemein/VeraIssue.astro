---
const { issues } = Astro.props;

const statusEmojis = {
    Offen: "üîì",
    Geschlossen: "‚úÖ",
    "Ready for Development": "üö¶",
    Angenommen: "‚òëÔ∏è",
    "In Arbeit": "üë∑üèª‚Äç‚ôÇÔ∏è",
    "In Test": "üîç",
};

function getStatusEmoji(status: string | number) {
    return statusEmojis[status] || "‚ùì"; // Fallback f√ºr unbekannte Status
}

const jsonToConfluenceWiki = (issues) => {
  const headers = ["L√∂sungsversion", "Issue Key", "Assignee"];
  let table = `|| ${headers.join(" || ")} ||\n`;

  // Sprint-Informationen extrahieren (erster gefundener Sprint)
  let sprintInfo = "";
  const firstSprint = issues.find(issue => issue.fields.customfield_10100)?.fields.customfield_10100[0];
  
  if (firstSprint) {
    const sprintStartRaw = firstSprint.match(/startDate=([^,]+)/)?.[1] || "üõ´";
    const sprintEndRaw = firstSprint.match(/endDate=([^,]+)/)?.[1] || "üõ¨";
    const sprintGoal = firstSprint.match(/goal=([^,]+)/)?.[1] || "Kein Ziel definiert";
    
    // Datumsformat ins deutsche Format umwandeln und Stunden runden
    const formatDate = (dateString) => {
      if (dateString === "Unbekannt") return dateString;
      const dateObj = new Date(dateString);
      const formattedDate = dateObj.toLocaleDateString("de-DE");
      const formattedTime = dateObj.getHours() + ":00";
      return `${formattedDate} ${formattedTime} Uhr`;
    };
    
    const sprintStart = formatDate(sprintStartRaw);
    const sprintEnd = formatDate(sprintEndRaw);
    
    sprintInfo = `*üìÜ Zeitraum:* üõ´ {status:color=Grey|title=${sprintStart}} ‚Üí üõ¨ {status:color=Grey|title=${sprintEnd}}  \n` +
                 `*üèÅ Sprint-Ziel:* \n ${sprintGoal}  \n\n`;
  }

  // Sortiere die Issues nach Assignee
  issues.sort((a, b) => {
    const assigneeA = a.fields.assignee?.displayName || "?";
    const assigneeB = b.fields.assignee?.displayName || "?";
    return assigneeA.localeCompare(assigneeB);
  });

  issues.forEach(issue => {
    const fields = issue.fields;
    
    // Alle L√∂sungsversionen extrahieren und als Status-Widget mit neuer Zeile setzen
    const fixVersions = fields.fixVersions?.map(v => `{status:color=Grey|title=${v.name}}`).join(" \\\\") || "-";
    
    // Assignee mit Confluence Benutzer verkn√ºpfen
    const assignee = fields.assignee 
      ? `[~${fields.assignee.name}]` // Confluence Benutzerverlinkung
      : "-";
    
    const row = [
      fixVersions, // L√∂sungsversionen als Status-Widgets untereinander
      `{jira:${issue.key}}`, // Jira-Makro f√ºr die Verlinkung
      assignee
    ];
    table += `| ${row.join(" | ")} |\n`;
  });

  return sprintInfo + table;
};

// Generiere die Tabelle
const wikiTable = jsonToConfluenceWiki(issues);
---

<section>
<h2>Jira Issues als Confluence-Tabelle</h2>
<textarea rows="10" style="width: 100%; font-family: monospace;" readonly>{wikiTable}</textarea>
</section>

{/* 
    issues.map(
        (issue: {
            fields: {
                status: { name: string | null | undefined };
                summary: unknown;
                assignee: { displayName: any };
            };
            key: unknown;
        }) => (
            <details
                open={
                    issue.fields.status.name === "In Arbeit"
                        ? "true"
                        : undefined
                }
                class={`
                        ${issue.fields.summary.toUpperCase().includes("RELEASE") ? "is-release" : ""}
                        ${issue.fields.status.name === "Geschlossen" ? "closed" : "not-ready"}
                        ${issue.fields.status.name === "In Arbeit" ? "in-progress" : ""}
                        ${issue.fields.status.name === "In Test" ? "in-test" : ""}
                    `}
            >
                <summary>
                    <small title={issue.fields.status.name}>
                        {getStatusEmoji(issue.fields.status.name)}
                    </small>{" "}
                    <code>
                        <strong>{issue.key}</strong>
                    </code>{" "}
                    - {issue.fields.summary}
                </summary>
                <p>
                    <code>{issue.fields.status.name}</code>Assigned:{" "}
                    {issue.fields.assignee?.displayName ?? "-"}
                </p>
                {issue.fields.subtasks.length > 0 && (
                    <div class="sub-issues">
                        <ul>
                            {issue.fields.subtasks.map(
                                (subTask: {
                                    key: unknown;
                                    summary: unknown;
                                    description: unknown;
                                }) => (
                                    <li>
                                        <code>{subTask.key}</code>:{" "}
                                        {subTask.fields.summary}{" "}
                                        <code>
                                            {subTask.fields.status.name}
                                        </code>
                                    </li>
                                ),
                            )}
                        </ul>
                    </div>
                )}
            </details>
        ),
    )*/
}

<style>
    details {
        border: 1px solid var(--sl-color-gray-4);
        padding: 0.5rem 1rem;
        border-radius: 0.5rem;
        scale: 0.96;
    }
    summary {
        cursor: pointer;
        text-overflow: ellipsis;
        word-break: keep-all;
        white-space: nowrap;
        overflow: hidden;
    }
    .closed {
        opacity: 0.75;
        border-color: var(--sl-color-green);
    }
    .closed:hover,
    .closed:focus-within {
        opacity: 1;
    }
    .is-release {
        border-width: 3px;
        border-style: dashed;
    }
    .is-release summary {
        font-weight: bold;
    }
    .in-progress {
        border-color: var(--sl-color-orange);
        scale: 1;
    }
    .in-test {
        border-color: var(--sl-color-accent);
        scale: 1;
    }
</style>
<style is:global>
    label:has(#hideClosed:checked) {
        color: var(--sl-color-green);
    }
    label:has(#hideClosed:checked) ~ .closed {
        display: none;
    }
</style>
